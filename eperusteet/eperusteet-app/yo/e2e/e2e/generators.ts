namespace Actions {
    export const save = () => {
        return browser.sleep(1000)
            .then(() => $(".edit-control-buttons > button[ng-click='save()']").click())
            .then(() => browser.sleep(1000));
    };

    export const paanakymaan = () => element(by.css("ol.breadcrumb > li:nth-of-type(2) > a"))
        .click()
        .then(() => browser.sleep(1000));

    export const cancel = () => element(by.css(".edit-control-buttons > button[ng-click='cancel()']")).click();

    export const scrollTo = (el) => browser.executeScript("arguments[0].scrollIntoView()", el.getWebElement());

    export const dragAndDrop = (what, to) => browser.actions().dragAndDrop(what, to).perform();
}

namespace PerusteHelpers {
    export const randomize = (str) => str + " " + Math.random();

    export const luoPerusteprojekti = (name: string, tyyppi: number) => {
        element(by.partialLinkText("Hallinta")).click();
        element(by.partialButtonText("Luo uusi perusteprojekti")).click();
        $("[id^=projektin-nimi-label-]").sendKeys(randomize("Autogenerated - " + name));
        $("[id^=diaarinumero-label-]").sendKeys("Diaarinumero " + Math.random());
        $("select:first-of-type").click();
        browser.sleep(300).then(() => { });
        $("option:nth-of-type(" + tyyppi + ")").click();
        element(by.partialButtonText("Hae ryhmä")).click();
        browser.sleep(3000).then(() => { });
        element(by.partialLinkText("ePerusteet Arboristin at perusteprojekti")).click();
        browser.sleep(200).then(() => { });
        element(by.partialButtonText("Luo projekti")).click();
        return browser.sleep(1000);
    }

    export const muokkaaPerusteenTiedot = (nimi = "Nimi -", diaari = "Diaari - ", voimaantulo = "1.1.2238") => browser.sleep(1000)
        .then(() => element(by.partialLinkText("Perusteen tiedot")).click())
        .then(() => element(by.partialButtonText("Muokkaa")).click())
        .then(() => $("input[ng-model='editablePeruste.nimi']").clear())
        .then(() => $("input[ng-model='editablePeruste.diaarinumero']").clear())
        .then(() => $("input[ng-model='editablePeruste.nimi']").sendKeys(randomize(nimi)))
        .then(() => $("input[ng-model='editablePeruste.diaarinumero']").sendKeys(randomize(diaari)))
        .then(() => $("input[dateformatvalidator][placeholder='Anna voimaantulopäivämäärä']").sendKeys(voimaantulo))

    export const asetaJulkaisuvalmius = () => browser.sleep(1000)
        .then(() => element(by.partialLinkText("Perusteen tiedot")).click())
        .then(() => element(by.partialButtonText("Muokkaa")).click())
        .then(() => $("input[ng-model='editablePeruste.nimi']").sendKeys(randomize("Nimi - ")))
        .then(() => $("input[ng-model='editablePeruste.diaarinumero']").sendKeys(randomize("Diaari - ")))
        .then(() => element(by.css("span.perusteen-kieli:nth-of-type(3) > a")).click())
        .then(() => $("input[dateformatvalidator][placeholder='Anna voimaantulopäivämäärä']").sendKeys("1.1.2238"))
        .then(Actions.save)
        .then(Actions.paanakymaan);

    // Täytyy olla projektin päänäkymässä
    export const lisaaTutkinnonOsa = (name, koodi = "104646") => browser.sleep(2000)
        .then(() => element(by.partialLinkText("Tutkinnon osat")).click())
        .then(() => element(by.partialButtonText("Lisää tutkinnon osa")).click())
        .then(() => browser.sleep(1000))
        .then(() => $("input[ng-model='editableTutkinnonOsaViite.tutkinnonOsa.nimi']").sendKeys(randomize(name)))
        .then(() => element(by.partialButtonText("Hae koodistosta")))
        .then(() => browser.sleep(3000))
        .then(() => element(by.partialLinkText(koodi)))
        .then(Actions.save)
        .then(Actions.paanakymaan);

    // Projektin päänäkymä
    export const lisaaTekstikappale = (name = "foo", sisalto = "bar") => browser.sleep(2000)
        .then(() => element(by.cssContainingText(".buttons > button[ng-click='createSisalto()']", "Lisää tekstikappale")).click())
        .then(() => browser.sleep(1000))
        .then(() => $("h3[ng-model='object.nimi']").sendKeys(randomize(name)))
        .then(() => $("div[ng-model='object.teksti']").sendKeys(randomize(sisalto)))
        .then(Actions.save)
        .then(Actions.paanakymaan);

    export const vaihdaTila = (to) => browser.sleep(200)
        .then(() => $(".statusbadge").click())
        .then(() => $("li > .statusbadge." + to).click())
        .then(() => browser.sleep(1000))
        .then(() => $(".modal-footer > button[ng-click='valitse()']").click())
        .then(() => browser.sleep(1000))
        .then(() => $(".modal-footer > button[ng-click='ok()']").click())
        .then(() => browser.sleep(1000))

    // FIXME
    export const dragTutkinnonOsa = () => browser.sleep(200)
        .then(() => element(by.partialLinkText("Tutkinnon muodostuminen")).click())
        .then(() => element(by.cssContainingText(".floater > button[ng-click='muokkaa()']", "Muokkaa")).click())
        .then(() => browser.sleep(1000))
        .then(() => {
            const item = element(by.css("ul[ng-model='uniikit'] > li:nth-of-type(2)"));
            const list = element(by.css("ul#tree-sortable > li"));
            const targetRect = list.getWebElement().getLocation().then(loc => {
                browser.actions().mouseDown(item.getWebElement()).perform();
                browser.actions().mouseMove(loc).perform();
                browser.actions().mouseUp().perform();
            });
            return browser.waitForAngular();
        })
        .then(() => browser.sleep(2000))
        .then(() => browser.waitForAngular());

}
